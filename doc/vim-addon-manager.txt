*vim-addon-manager.txt*
Idea: let users install and uninstall vim plugins with a minimum of work:
* each plugin is put into its own directory
* dependencies are fetched automatically


------------------------------------------------------------------------------
a plugin ~

A plugin is directory NAME containing vim runtimefiles (-> :h vimruntime)
Additionally it contains a file:
  NAME/NAME-info.txt

------------------------------------------------------------------------------
NAME/NAME-info.txt ~
is read by scriptmanager#ReadPluginInfo
{
"name" : NAME,
"version" : "2.0",
"author" : "surname lastname <email>",
"maintainer" : "surname lastname <email>,
"repository" : REPO,
"dependencies" : { "name" : REPO },
"description": "",
[ "runtimepath": "subdir" ] " << this is optional and required only be a minority of plugins
}

where REPO =
  { "type" : "git", "url" : "git://" ... }
  or 
  { "type" : "svn", "url" : "git://" ... }
  or 
  ..

It should be a valid JSON dict and readable by Vim. Thus use " instead of '

You may want to install http://www.vim.org/scripts/script.php?script_id=1945
to get syntax highligting (TODO)

------------------------------------------------------------------------------
INSTALLING THIS VIM PLUGIN ~

put this plugin into ~/vim-plugins/vim-addon-manager

  Linux steps:
  mkdir ~/vim-plugins; cd ~/vim-plugins
  git clone git://github.com/MarcWeber/vim-addon-manager.git


Add to your .vimrc:

  " tell Vim where to find the autoload function:
  set runtimepath+=~/vim-plugins/vim-addon-manager

  " activate the addons called 'vim-addon-manager', 'JSON', 'name1', 'name2'
  " This adds them to runtimepath and ensures that plugin/* and after/plugin/*
  " files are sourced
  call scriptmanager#Activate(['vim-addon-manager','JSON',"name1","name2"])

Note: Both vim-addon-manager and JSON are optional.
      They have been added because:
      vim-addon-manager: UpdateAddons will update it
      JSON: highlights the addon-info.txt files

See next section to learn what will happen

------------------------------------------------------------------------------
howto install & activate a plugin ~

INSTALL:

  way 1 (manual):
    manually put the plugin contents in the directory which contains vim-repository-manager.

  way 2 (automatic):

    call scriptmanager#Install(["name"])
    or
    call scriptmanager#Install([PATH_OR_URL/NAME-info.txt])

    " this will download the repository and its dependencies and put them into
    " the directory containing vim-script-manager
    " note: if its a file it must contain a '/'. Eg use ./current-dir-info.txt


ACTIVATE:

  call scriptmanager#Activate(["name1","name2"])
 (before filetype plugin on)

  " dependencies will be activated automatically

scriptmanager#Activate will install plugins on startup. Press y<cr> for each
plugin to be installed once then.

------------------------------------------------------------------------------
DEPRECATION ~

You can depreceate a package by defining the depreceate key in the repository
dict. When installing such a addon user will be prompted for confirmation.
The idea is to tell people to use addons which supersedes the ones they're
trying to install

------------------------------------------------------------------------------
BUGS ~
- this help file must be tidied up
- helptags isn't run for you (yet)

There is an older project which has the same name:
http://packages.debian.org/sid/vim-addon-manager
Tom Link told me about it. What shall I do?
I just leave this comment here for now

godlygeek suggested renaming this plugin to "vim-runtime-manager".
So this may happen in the near future. However I also asked the Debian package
maintainer Jamessan. He was fine with this plugin having the same name.

------------------------------------------------------------------------------
security note ~
I'm not responsible for any code you active by using this plugin.
Be aware that all plugins might contain a commands like this: >
  !rm -fr $HOME

------------------------------------------------------------------------------
testing and uninstalling addons


You can install using >
  ActivateAddons <c-d>vim-latex
<

You can uninstall addons this way: >
  :UninstallNotLoadedAddons vim-latex

------------------------------------------------------------------------------
speeding startup up on heavy IO load.. (?) - force deactivation of plugin/*.vim files ~

(Well.. feature is in alpha stage)

Maybe you use as many plugins as I do? Starting up Vim can be a nightmare if
system is under IO load. That's why I wrote this small helper function: >
  command MergePluginFiles call scriptmanager2#MergePluginFiles(["vim-addon-git","no-match"])
<
It will rename all plugin dirs to plugin-merged so that they
are ignored by Vim. Then it'll merge file contents into this one >
  ~/.vim/after/plugin/vim-addon-manager-merged.vim
< file which should cause less IO stress to your system. Thus Vim will startup
faster. Of course there are some issues the function tries to take care off -
But this can also break the scritps:
  - s:foobar file local vars have to be renamed if they are used in more than
    one plugin file
  - guards are replaced by if .. endif which might be inneficient.
    So if you want to disable plugins use the skip pattern like this: >
    call scriptmanager2#MergePluginFiles(["vim-addon-git","tselectfile\.vim\|tselectbuffer\.vim"])
< - finish is bad. So its commented (the gurads should be replaced by if ..
    endif blocks instead - Do you want to implement it?

Caching the addon-info files would be a nice idea, too.

------------------------------------------------------------------------------
Example install list of all known repositories ~
call scriptmanager#Install(["vim-addon-manager-known-repositories"])

------------------------------------------------------------------------------
How to add your own repository locations? ~
Ask me to add it to vim-addon-manager-known-repositories or do what that
plugin is doing: Add your own dicts to: >
  g:vim_script_manager['plugin_sources']['your-plugin-name'] = { ... }
<
in your .vimrc or somewhere eles
------------------------------------------------------------------------------
historical notes ~
This is a KISS reimplementation of http://github.com/MarcWeber/theonevimlib

------------------------------------------------------------------------------
related work: ~
Send me a mail so that I can add your project
  http://github.com/c9s/Vimana
  http://snk.tuxfamily.org/log/vim-script-management-system.html

  Are they better? Don't know. Unless they support specyfing dependencies I'm
  not considering switching so its up to you to judge.

  If I feel something else fits my needs better I'll deprecate this package as
  I did for tovl.


------------------------------------------------------------------------------
TODO ~
reuse this code?
http://www.vim.org/scripts/script.php?script_id=3061


------------------------------------------------------------------------------
running the test ~

this should be all you have to do:
sh vim-addon-manager-test.sh

You should see
1
1
1

at the end. Written for Linux only. Code coverage is bad. Its a starting
point.

------------------------------------------------------------------------------
contributors ~
(incomplete list):
Tim Pope (Json validation)
ZyX (Nikolay Pavlov, ZyX-I on github)
Tux Tom (http://github.com/TuxTom) for heplign fixing a cd bug on Windows


vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:

